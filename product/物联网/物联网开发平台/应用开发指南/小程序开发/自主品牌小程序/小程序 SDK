
## SDK 初始化

SDK 初始化后，才能通过 SDK 使用物联网开发平台提供的云端能力。初始化 SDK 需要依次完成以下步骤：

1. 调用 `QcloudIotExplorerAppDevSdk` 的构造函数并传入配置项，创建 SDK 对象。
2. 调用 SDK 对象的 `init` 函数初始化 SDK。

### SDK 对象构造函数

```typescript
QcloudIotExplorerAppDevSdk(sdkOptions)
```

#### 配置项

| 参数名         | 参数描述                                                     | 类型                                          | 必填 |
| -------------- | ------------------------------------------------------------ | --------------------------------------------- | ---- |
| getAccessToken | 获取 accessToken 的回调，返回一个Promise，其值为 [微信号注册登录](https://cloud.tencent.com/document/product/1081/40781) 应用端 API 的返回结果 | Promise<{ Token:string, ExpireAt?: number }> | 是   |
| appKey         | 在 [物联网开发平台控制台](https://console.cloud.tencent.com/iotexplorer) >【应用开发】>【小程序开发】中申请的 AppKey | string                                        | 是   |
| debug          | 是否为调试模式，默认为：false，开启调试模式后会开启打印调试日志 | boolean                                       | 否   |
| wsConfig       | WebSocket 的配置                                             | WsOptions                                     | 否   |

#### getAccessToken 回调函数

SDK 初始化时，将调用 `getAccessToken` 回调函数以登录到物联网开发平台，并取得平台的 AccessToken。

通过调用物联网开发平台的 [微信号注册登录](https://cloud.tencent.com/document/product/1081/40781) 应用端 API，可以让小程序用户通过微信注册登录到物联网开发平台，并获取平台的 AccessToken。由于涉及物联网开发平台 AppSecret 以及小程序用户的 openid 等敏感信息，该应用端 API 需要由开发者的后台服务器调用。

`getAccessToken` 函数需要实现以下流程：
![获取 AccessToken 流程](https://main.qcloudimg.com/raw/888caa0f72398fcfe7799ca81b37a858.png)

1. 调用 [wx.getUserInfo](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html) 小程序 API 获取小程序用户信息（openid、昵称及头像）。
2. 向开发者后台服务器发送登录请求，并传参小程序的用户信息。
3. 开发者后台服务器调用 [微信号注册登录](https://cloud.tencent.com/document/product/1081/40781) 应用端 API 登录物联网开发平台。
4. 开发者后台服务器将应用端 API 的响应返回给小程序。
5. 小程序收到开发者后台服务器的响应后，将响应内容作为 `getAccessToken` 函数返回的 Promise 的值。



#### WsOptions 数据结构

| 属性名                | 属性描述                                                     | 类型    | 必填 |
| --------------------- | ------------------------------------------------------------ | ------- | ---- |
| autoReconnect         | websocket断开后是否自动连接，默认为：true，自动重连每两秒尝试一次 | boolean | 否   |
| disconnectWhenAppHide | 当 App.onHide 触发时，是否自动断开 websocket，默认为：true   | boolean | 否   |
| connectWhenAppShow    | 当 App.onShow 触发时，是否自动连接 websocket，默认为：true   | boolean | 否   |
| url                   | websocket 服务的 URL，默认为：wss://iot.cloud.tencent.com/ws/explorer | string  | 否   |
| heartbeatInterval     | 心跳包的发送间隔，单位毫秒，默认为：60000                    | number  | 否   |

### SDK 初始化

```typescript
sdk.init(options) => Promise< void >
```

调用后将依次执行：

1. 登录（调用 `getAccessToken` 回调函数，取得平台的 AccessToken）。
2. 连接 WebSocket。

`init` 函数可同时多次调用（返回同一个缓存的 Promise）。若一次执行未完成或已执行成功，多次调用后拿到的会是同一个 Promise。若 API 调用失败，则该缓存的 Promise 在 reject 之后会被释放，再次调用则将重新执行。

#### 参数说明

| 参数名 | 参数描述                                        | 类型    | 必填 |
| ------ | ----------------------------------------------- | ------- | ---- |
| reload | 是否清理缓存的 Promise 并重新执行，默认为 false | boolean | 否   |

#### 示例代码

```javascript
const getAccessToken = () => new Promise((resolve, reject) => {
  // 1. 获取小程序用户信息
  wx.getUserInfo({
    success: resolve,
    fail: reject
  });
}).then(userInfo => new Promise((resolve, reject) => {
  // 2. 调用后台服务器的登录接口
  // 仅为示例，请根据真实的接口修改以下代码
  wx.request({
    url: '/login',
    data: {
      userInfo: userInfo
    },
    header: {
      'content-type': 'application/json'
    },
    success(res) {
      // 返回数据结构示例
      // { Token: 'ACCESS_TOKEN', ExpireAt: 1234567890 }
      resolve(res.data);
    },
    fail(err) {
      reject(err);
    }
  });
}));

const sdk = new QcloudIotExplorerAppDevSdk({
  debug: true,
  appKey: '此处填写您的 AppKey',
  getAccessToken: getAccessToken
});

// SDK 初始化
sdk.init();
```

## 应用端 API

应用端 API 是物联网开发平台为了满足智能家居场景，为用户开发自有品牌的小程序或 App 而提供的云端服务，包括用户管理、设备管理、设备定时、家庭管理等基础能力。关于应用端 API 的更多信息，请参见 [应用端 API 简介](https://cloud.tencent.com/document/product/1081/40773)。

### 调用应用端 API

调用应用端 API 并获得响应数据。

```typescript
sdk.requestApi(Action: string, payload?: object, options?: object) => Promise< response >
```

#### 参数说明

| 参数名  | 参数描述                                                     | 类型   | 必填 |
| ------- | ------------------------------------------------------------ | ------ | ---- |
| Action  | 请求应用端 API 的 Action 名                                  | string | 是   |
| payload | 请求应用端 API 的数据，会自动带上公共参数： `AccessToken` 与 `RequestId` | object | 否   |
| options | 请求的选项，将透传给 [wx.request](https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html) | object | 否   |

#### 返回值

- 请求成功（code=0）：返回一个 resolved 的 Promise，其值为应用端 API 响应中的 `Response` 部分数据。
- 请求失败：返回一个 rejected 的 Promise，其值的数据结构为：`{ code, msg, ...detail }`。

#### 示例代码

```javascript
sdk.requestApi('AppGetFamilyDeviceList', { FamilyId: 'default' })
  .then(data => {
    // 请求成功
  	console.log(data);
  })
  .catch(err => {
    // 请求失败
  	console.error(err);
  });
```

>! 
- 腾讯云物联网开发平台是基于**家庭**的设备体系，每个家庭有其对应的 `FamilyId`，每台设备均归属一个家庭。
- 开发者也可以选择不关注家庭这一概念，对所有需要传`FamilyId`的接口（如 [获取用户绑定设备列表](https://cloud.tencent.com/document/product/1081/40803)）传入`default` 作为 `FamilyId`，SDK 会自动完成内部的家庭相关的逻辑（SDK 会为用户创建一个默认家庭，若`FamilyId`入参的值为`default`，SDK 会自动替换为用户默认家庭的`FamilyId`）。

## 设备配网

SDK 目前支持 softAP 和 SmartConfig 方式进行设备配网。

```typescript
sdk.connectDevice({
  connectType: 'softap|smartconfig', 
  connectOpts: (softApOpts | smartConfigOpts)
}) => Promise< void >
```

### softAP 配网

关于 softAP 方式配网的流程，请参见 [softAP 配网开发](https://cloud.tencent.com/document/product/1081/43695)。

#### softApOpts 配网参数

| 参数名                    | 参数描述                                                     | 类型                                                         | 必填 |
| ------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ---- |
| targetWifiInfo            | 目标 Wi-Fi 信息，需要设备去连接的 Wi-Fi 的信息               | WifiInfo                                                     | 是   |
| softApInfo                | 设备热点信息，如果传该配置，则首先会调用 wx.connectWifi 去连接设备热点；如果不传，则需要自行引导用户去连接设备热点 | WifiInfo                                                     | 否   |
| familyId                  | 家庭ID，默认为：'default'，即用户默认家庭 ID                 | 'default' \| string                                          | 否   |
| onProgress                | 配网过程执行到每个步骤时触发的回调，回调中入参为当前步骤的详情<li>code：步骤代码，详见 [配网步骤](#softAP) 小节<li>msg： 步骤描述<li>detail：步骤详情，根据每个步骤不同而不同 | ({ code: ConnectDeviceStepCode, msg: string, detail?: object }) => void | 否   |
| onError                   | 配网失败时触发<li>code：错误代码，详见 [错误码 ](#test2) 小节<li>msg：错误描述<li>detail：错误详情 | ({ code: ConnectDeviceErrorCode, msg: string, detail }) => void | 是   |
| onComplete                | 配网完成后触发                                               | () => void                                                   | 是   |
| udpAddress                | 连接上设备热点后，小程序发起 UDP 通信的地址，默认为：'192.168.4.1'，一般无需更改 | string                                                       | 否   |
| udpPort                   | 连接上设备热点后，小程序发起 UDP 通信的端口，默认为：8266，一般无需更改 | number                                                       | 否   |
| udpCommunicationRetryTime | 与设备进行 UDP 通信时的 UDP 消息发送重试次数，默认为：5      | number                                                       | 否   |
| waitUdpResponseDuration   | UDP 消息发送重试间隔，单位毫秒，默认为：2000，一般无需更改   | number                                                       | 否   |
| stepGap                   | 配网过程中，每一步中间等待的间隔，单位毫秒，默认为：3000，一般无需更改 | number                                                       | 否   |

#### WifiInfo 数据结构

| 属性名   | 属性描述      | 类型   | 必填 |
| -------- | ------------- | ------ | ---- |
| SSID     | Wi-Fi 的 SSID | string | 是   |
| password | Wi-Fi 的 密码 | string | 否   |


#### 示例代码

```javascript
sdk.connectDevice({
  connectType: 'softap',
  connectOpts: {
    targetWifiInfo: { // 需要设备去连接的 Wi-Fi 的信息
      SSID: 'target-wifi-ssid',
      password: 'target-wifi-password'
    },
    softApInfo: { // 设备热点信息，若不传则需要引导用户自行去连接设备热点
      SSID: 'softap-ssid',
      password: 'softap-password'
    },
    familyId: 'default',
    onProgress: (progress) => {
      console.log('onProgress', progress.code, progress.msg);
    },
    onError: (error) => {
      console.error('onError', error.code, error.msg);
    },
    onComplete: () => {
      console.log('onComplete');
    }
  }
});
```
<span id="softAP"></span>
#### 配网步骤

| 步骤                                                | 描述                                                         |
| --------------------------------------------------- | ------------------------------------------------------------ |
| ConnectDeviceStepCode.CONNECT_DEVICE_START          | 开始配网                                                     |
| ConnectDeviceStepCode.CONNECT_SOFTAP_START          | 开始连接设备热点                                             |
| ConnectDeviceStepCode.CONNECT_SOFTAP_SUCCESS        | 连接设备热点成功                                             |
| ConnectDeviceStepCode.CREATE_UDP_CONNECTION_START   | 开始与设备建立 UDP 连接                                      |
| ConnectDeviceStepCode.CREATE_UDP_CONNECTION_SUCCESS | 与设备建立 UDP 连接成功                                      |
| ConnectDeviceStepCode.SEND_TARGET_WIFIINFO_START    | 开始发送目标 Wi-Fi 信息                                       |
| ConnectDeviceStepCode.SEND_TARGET_WIFIINFO_SUCCESS  | 发送目标 Wi-Fi 信息成功<br>detail: { response }，收到设备的具体响应 |
| ConnectDeviceStepCode.GET_DEVICE_SIGNATURE_START    | 开始获取设备签名                                             |
| ConnectDeviceStepCode.GET_DEVICE_SIGNATURE_SUCCESS  | 获取设备签名成功<br>detail: { signature }                    |
| ConnectDeviceStepCode.CONNECT_TARGET_WIFI_START     | 开始手机连接目标 Wi-Fi                                        |
| ConnectDeviceStepCode.CONNECT_TARGET_WIFI_SUCCESS   | 手机连接目标 Wi-Fi 成功                                       |
| ConnectDeviceStepCode.ADD_DEVICE_START              | 开始添加设备<br>detail: { params }，请求参数                 |
| ConnectDeviceStepCode.ADD_DEVICE_SUCCESS            | 添加设备成功<br>detail: { response }，接口具体响应           |
| ConnectDeviceStepCode.CONNECT_DEVICE_SUCCESS        | 配网成功                                                     |


### SmartConfig 配网

关于 SmartConfig 方式配网的流程，请参见 [SmartConfig 配网开发](https://cloud.tencent.com/document/product/1081/43696)。SmartConfig 方式配网需要调用 [生成 Wi-Fi 设备配网 Token](https://cloud.tencent.com/document/product/1081/44044) 应用端 API 获取 Wi-Fi 设备配网 Token。

#### smartConfigOpts 配网参数

| 参数名                  | 参数描述                                                     | 类型                                                         | 必填 |
| ----------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ---- |
| targetWifiInfo          | 目标 Wi-Fi 信息，需要设备去连接的 Wi-Fi 的信息               | WifiInfo                                                     | 是   |
| bindDeviceToken         | Wi-Fi 设备配网 Token，从后台接口 [生成 Wi-Fi 设备配网 Token](https://cloud.tencent.com/document/product/1081/44044) 获取 | string                                                       | 是   |
| familyId                | 家庭 ID，默认为：'default'，即用户默认家庭 ID                 | 'default' \| string                                          | 否   |
| onProgress              | <li>code：步骤代码，详见 [配网步骤](#SmartConfig) 小节<li>msg：步骤描述<li>detail：步骤详情，根据每个步骤不同而不同 | ({ code: ConnectDeviceStepCode, msg: string, detail?: object }) => void | 否   |
| onError                 | 配网失败时触发<li>code：错误代码，详见 [错误码](#test2) 小节<li>msg：错误描述<li>detail：错误详情 | ({ code: ConnectDeviceErrorCode, msg: string, detail }) => void | 是   |
| onComplete              | 配网完成后触发                                               | () => void                                                   | 是   |
| udpPort                 | 小程序和设备连上同一个局域网之后，小程序发起 UDP 通信的端口，默认为：8266，一般无需更改 | number                                                       | 否   |
| queryTokenRetryTime     | 轮询云端，查询设备绑定云端的状态的次数，默认为：20           | number                                                       | 否   |
| waitUdpResponseDuration | 轮询云端，设备绑定云端的状态的重试间隔，单位毫秒，默认为：2000，一般无需更改 | number                                                       | 否   |
| stepGap                 | 配网过程中，每一步中间等待的间隔，单位毫秒，默认为：3000，一般无需更改 | number                                                       | 否   |

#### WifiInfo 数据结构

| 属性名   | 属性描述       | 类型   | 必填 |
| -------- | -------------- | ------ | ---- |
| SSID     | Wi-Fi 的 SSID  | string | 是   |
| BSSID    | Wi-Fi 的 BSSID | string | 是   |
| password | Wi-Fi 的 密码  | string | 是   |

#### 示例代码

```javascript
// 1. 获取 Wi-Fi 设备配网 Token
sdk.requestApi('AppCreateDeviceBindToken')
  .then(data => {
    const bindDeviceToken = data.Token;
    // 2. 开始配网
    sdk.connectDevice({
      connectType: 'smartconfig',
      connectOpts: {
        targetWifiInfo: { // 需要设备去连接的 Wi-Fi 的信息
          SSID: 'target-wifi-ssid',
          BSSID: '00:11:22:aa:bb:cc',
          password: 'target-wifi-password'
        },
        bindDeviceToken: bindDeviceToken, // 用于绑定的设备 token
        familyId: 'default',
        onProgress: (progress) => {
          console.log('onProgress', progress.code, progress.msg);
        },
        onError: (error) => {
          console.error('onError', error.code, error.msg);
        },
        onComplete: () => {
          console.log('onComplete');
        }
      }
    });
  });
```
<span id="SmartConfig"></span>
#### 配网步骤

`sdk.connectDevice()` 配网过程中，每执行完一个步骤就会触发一次 `onProgress` 回调，入参为：`{ code, msg, ...detail }` 形式。

| 步骤                                                 | 描述                                                         |
| ---------------------------------------------------- | ------------------------------------------------------------ |
| ConnectDeviceStepCode.CONNECT_DEVICE_START           | 开始配网                                                     |
| ConnectDeviceStepCode.CONNECT_SMARTCONFIG_START      | 开始给设备发送 Wi-Fi 信息                                    |
| ConnectDeviceStepCode.CONNECT_SMARTCONFIG_SUCCESS    | 手机和设备连接成功<br>`detail: { targetUdpAddress }`，收到设备局域网地址，用于给设备发送信息 |
| ConnectDeviceStepCode.CREATE_UDP_CONNECTION_START    | 开始与设备建立 UDP 连接                                      |
| ConnectDeviceStepCode.CREATE_UDP_CONNECTION_SUCCESS  | 与设备建立 UDP 连接成功                                      |
| ConnectDeviceStepCode.SMARTCONFIG_SEND_TOKEN_START   | 开始发送设备 token                                           |
| ConnectDeviceStepCode.SMARTCONFIG_SEND_TOKEN_SUCCESS | 发送设备 token 成功                                          |
| ConnectDeviceStepCode.QUERY_TOKEN_STATE_START        | 开始查询设备与云端的连接状态                                 |
| ConnectDeviceStepCode.QUERY_TOKEN_STATE_SUCCESS      | 设备与云端连接成功                                           |
| ConnectDeviceStepCode.ADD_DEVICE_START               | 开始添加设备                                                 |
| ConnectDeviceStepCode.ADD_DEVICE_SUCCESS             | 添加设备成功                                                 |
| ConnectDeviceStepCode.CONNECT_DEVICE_SUCCESS         | 一键配网成功                                                 |

<span id="test2"></span>
### 错误码

| 错误码                                          | 描述                                                         |
| ----------------------------------------------- | ------------------------------------------------------------ |
| ConnectDeviceErrorCode.UDP_NOT_RESPONSED        | 超时未收到设备响应                                           |
| ConnectDeviceErrorCode.CONNECT_SOFTAP_FAIL      | 手机连接设备热点失败<br>detail: { errMsg }，错误信息         |
| ConnectDeviceErrorCode.CONNECT_TARGET_WIFI_FAIL | 手机连接 Wi-Fi 路由器失败<br>detail: { errMsg }，错误信息    |
| ConnectDeviceErrorCode.UDP_ERROR                | 配网过程中触发 udp.onError 事件<br>detail: { errMsg }，错误信息 |
| ConnectDeviceErrorCode.DEVICE_ERROR             | 收到设备响应的错误<br>detail: { errMsg }，错误信息           |
| ConnectDeviceErrorCode.INVALID_UDP_RESPONSE     | 收到非法的设备响应<br>detail: { response }，具体的设备端响应 |
| ConnectDeviceErrorCode.DEVICE_CONNECT_MQTT_FAIL | 设备连接 MQTT 服务失败                                       |
| ConnectDeviceErrorCode.DEVICE_CONNECT_WIFI_FAIL | 设备连接目标 Wi-Fi 失败                                      |
| ConnectDeviceErrorCode.ADD_DEVICE_FAIL          | 添加设备失败<br>detail: { errMsg }，错误信息                 |
| ConnectDeviceErrorCode.SEND_UDP_MSG_FAIL        | 与设备 UDP 通信时，发送消息失败                              |

## 长连接通信

### 订阅设备信息

通过 WebSocket 监听服务端实时推送的设备上下线状态及属性数据。

```typescript
sdk.subscribeDevices(deviceList: string[] | deviceInfo[]): Promise< void >

```

#### 参数

| 参数名     | 参数描述                                                     | 类型                     | 必填 |
| ---------- | ------------------------------------------------------------ | ------------------------ | ---- |
| deviceList | 设备 ID 列表，或设备信息列表（deviceInfo 需包含 DeviceId 字段） | string[] \| deviceInfo[] | 是   |

#### 示例代码

##### 通过设备 ID 列表订阅

```javascript
sdk.subscribeDevices([
  'Product1/Device1',
  'Product1/Device2',
  'Product2/Device3'
]);

```

##### 通过设备列表订阅

```javascript
sdk.requestApi('AppGetFamilyDeviceList', { FamilyId: 'default' })
  .then(data => {
    sdk.subscribeDevices(data.DeviceList);
  })

```

### 手动建立长连接

手动连接 WebSocket。一般不需要调用，除非关闭了`sdkOptions.disconnectWhenAppHide`选项。

```typescript
sdk.connectWebsocket() => Promise< void >

```

#### 示例代码

```javascript
sdk.connectWebsocket();

```

### 手动断开长连接

手动断开 WebSocket。一般不需要调用，除非关闭了`sdkOptions.autoReconnect`与`sdkOptions.connectWhenAppShow`选项。

```typescript
sdk.disconnectWebsocket() => Promise< void >

```

#### 示例代码

```javascript
sdk.disconnectWebsocket();

```

### 监听事件

监听 WebSocket 事件。

```typescript
sdk.on(type: EventTypes, listener: (...args) => void) => void

```

#### 参数

| 参数名   | 参数描述             | 类型            | 必填 |
| -------- | -------------------- | --------------- | ---- |
| type     | 要监听的事件         | EventTypes      | 是   |
| listener | 事件触发时的回调函数 | (param) => void | 是   |

#### 示例代码

```javascript
const { EventTypes } = require('qcloud-iotexplorer-appdev-sdk/qcloud-iotexplorer-appdev-sdk');

// 监听设备上报数据推送
sdk.on(EventTypes.WsReport, ({ deviceId, deviceData }) => {
  console.log('websocket device report', deviceId, deviceData);
});

```

### 取消监听事件

取消监听 WebSocket 事件。

```typescript
sdk.off(type: EventTypes, listener: (...args) => void) => void

```

#### 参数

| 参数名   | 参数描述                                                   | 类型                    | 必填 |
| -------- | ---------------------------------------------------------- | ----------------------- | ---- |
| type     | 要取消监听的事件                                           | EventTypes              | 是   |
| listener | 要取消监听的事件的回调函数，不传则清除该事件的所有回调函数 | (param) => void \| null | 否   |

#### 示例代码

```javascript
const { EventTypes } = require('qcloud-iotexplorer-appdev-sdk/qcloud-iotexplorer-appdev-sdk');

const listener = ({ deviceId, deviceData }) => {
  console.log('websocket device report', deviceId, deviceData);
};

// 监听设备上报数据推送
sdk.on(EventTypes.WsReport, listener);

// 取消监听设备上报数据推送
sdk.off(EventTypes.WsReport, listener);

```

### 事件列表

| 事件类型                  | 描述                   | 参数                       |
| ------------------------- | ---------------------- | -------------------------- |
| EventTypes.WsPush         | WebSocket 推送原始数据 | { push, action, params }   |
| EventTypes.WsReport       | 设备上报数据           | { deviceId, deviceData }   |
| EventTypes.WsStatusChange | 设备在线状态变更       | { deviceId, deviceStatus } |
| EventTypes.WsControl      | 设备控制数据           | { deviceId, deviceData }   |

## 错误处理

SDK 所有接口的错误都经过标准化处理为`{ code, msg, ...detail }`的形式。具体取值根据接口的不同而不同。

### 全局错误码

>! 下文中描述为一个对象的 detail ，实际上是解构到错误对象当中的
>如 `INTERNAL_ERROR` 的具体 Error 为：`{ code: 'INTERNAL_ERROR', msg: Error.message, stack: Error.stack, error: Error }`

| 错误码                           | 描述                                                         |
| -------------------------------- | ------------------------------------------------------------ |
| ErrorCode.VERIFY_LOGIN_FAIL      | 未登录或登录态已失效                                         |
| ErrorCode.INTERNAL_ERROR         | JS Error<br>detail: { stack, error }，分别为错误堆栈和原始错误对象 |
| ErrorCode.GET_USERINFO_NEED_AUTH | 调用 [wx.getUserInfo](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html) 时用户未授权用户信息权限，遇到该错误时需要引导用户授权<br>detail: { errMsg }，小程序 API 的原始错误信息 |
| ErrorCode.WX_API_FAIL            | 调用小程序 API 报错<br>detail: { errMsg }，小程序 API 的原始错误信息 |

### 调用应用端 API 错误码

除了以上全局错误码，其余错误码为应用端 API 响应中的错误码，具体错误码请查看对应的应用端 API 文档。同时接口的错误中会包含标识该次请求的`detail.reqId`，可用来查询该次请求的详细日志。
