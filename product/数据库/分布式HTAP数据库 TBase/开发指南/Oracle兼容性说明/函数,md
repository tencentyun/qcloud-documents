## 数学
### MOD(character varying,integer)
`MOD` 为取余函数，`MOD(m,n)`，其中 `m`、  `n` 都应是数字，同时 `m` 支持字符串类型。

#### 语法
```
MOD(character varying,integer)
```
    
#### 示例
```
postgres=# select mod('10',3) from dual;
  mod 
-----
     1
(1 row)
```  

### SUM(character varying)
`SUM` 为求和函数，`SUM(m)`，其中 `m` 应是数字，同时 `m` 支持字符串类型。

#### 语法
```
SUM(character varying)
```
    
#### 示例
```
postgres=# create table t_sum(id int,info varchar(15));
CREATE TABLE
postgres=# insert into t_sum select generate_series(1,100),generate_series(100,200);
INSERT 0 100
postgres=# select sum(id),sum(info) from t_sum;
  sum  |  sum  
------+-------
  5050 | 15150
 (1 row)
```
    

### LISTAGG(numeric,text)
`LISTAGG` 聚合查询函数，可实现列转行，通常第一个参数为字符串类型，同时也支持数字。

#### 语法
```
LISTAGG( column_name , text ) WITHIN GROUP( ORDER BY column_name [, ... { DESC| ASC } ] )。
```
    
#### 示例
```
支持第一个参数为数字
postgres=#  with t as (   
select 1 grp_no,'B' c1 from dual union all
select 1 grp_no,'A' c1 from dual union all
select 1 grp_no,'C' c1 from dual union all
select 2 grp_no,'E' c1 from dual union all
select 2 grp_no,'D' c1 from dual )
select grp_no,listagg(grp_no,'->') as t1
   from t
  group by grp_no;
  grp_no |   t1
--------+---------
   2 | 2->2
   1 | 1->1->1
(2 rows)
    
同时支持第一个参数为字符串
postgres=# with t as (   
select 1 grp_no,'B' c1 from dual union all
select 1 grp_no,'A' c1 from dual union all
select 1 grp_no,'C' c1 from dual union all
select 2 grp_no,'E' c1 from dual union all
select 2 grp_no,'D' c1 from dual )
select grp_no,listagg(c1,'->') as t1
   from t
  group by grp_no;
  grp_no |   t1
--------+---------
   2 | E->D
   1 | B->A->C
(2 rows)
```
    
## 日期时间
### ADD_MONTHS(timestamp,text)
`ADD_MONTHS(x, y)` 函数用于计算某个日期向前或者向后 `y` 个月后的时间，通常第 2 个参数为数字，同时支持字符串。

#### 语法
```
ADD_MONTHS(timestamp, text) 
```
    
#### 示例
```
postgres=# select sysdate, add_months(sysdate, '2'), add_months(sysdate, '-2') from dual;
orcl_sysdate | add_months  | add_months  
---------------------+---------------------+---------------------
  2021-03-19 22:42:20 | 2021-05-19 22:42:20 | 2021-01-19 22:42:20
(1 row)
postgres=# select sysdate, add_months(sysdate, 2), add_months(sysdate, -2) from dual;
orcl_sysdate | add_months  | add_months  
---------------------+---------------------+---------------------
  2021-03-19 22:42:49 | 2021-05-19 22:42:49 | 2021-01-19 22:42:49
(1 row)
```
    
### NUMTODSINTERVAL
NUMTODSINTERVAL 时间计算函数，2个参数第1个通常为数字，第2个参数为单位，可选有 'day','hour','minute','second' （忽略大小写）。

#### 语法
```
NUMTODSINTERVAL({ string | numeric } , { 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND' }) 
```
      
#### 示例
```
postgres=# select sysdate,sysdate+numtodsinterval(3,'hour') as res from dual;
orcl_sysdate | res 
---------------------+---------------------
  2021-03-19 22:47:33 | 2021-03-20 01:47:33
(1 row)
```
   
### NUMTOYMINTERVAL
`NUMTODSINTERVAL` 时间计算函数有 2 个参数。第 1 个通常为数字，第 2 个参数为单位，可选有 'day'，'hour'，'minute'，'second' （忽略大小写）。

#### 语法
```
NUMTOYMINTERVAL({ string | numeric } , { 'YEAR' | 'MONTH' })
```
    
#### 示例
```
postgres=# select sysdate,sysdate+numtoyminterval(3,'month') as res from dual;
orcl_sysdate | res 
---------------------+---------------------
  2021-03-19 22:58:35 | 2021-06-19 22:58:35
(1 row)
```
  
### DBTIMEZONE
返回数据库时区。

#### 示例
```
postgres=# select DBTIMEZONE from dual;
dbtimezone 
------------
  08:00:00
(1 row)
```
    
### SYSDATE
返回数据库当前时间。

#### 示例
```
postgres=# select sysdate from dual;
orcl_sysdate 
---------------------
  2021-03-19 23:04:08
(1 row)
```
    
### MONTHS_BETWEEN
返回两个日期之间的月份数。
在 Oracle 中计算月份的差值，都是月底或是日期相同，都会按整月计算。如果计算结果不是整数，Oracle 会把31作为分母来计算。

#### 使用限制
Oracle 和 TDSQL PostgreSQL版（Oracle 兼容）的该函数实现相同，但精度不同，Oracle 有效数字为9位，TDSQL PostgreSQL 版（Oracle 兼容）为15位。

#### 语法
```
MONTHS_BETWEEN( timestamp, timestamp)
```
    
#### 示例
```
postgres=# select months_between(to_date('20210331', 'yyyymmdd'), to_date('20200131', 'yyyymmdd')) as months from dual;
  months 
--------
  14
(1 row)
postgres=# select months_between(to_date('20200331', 'yyyymmdd'), to_date('20200130', 'yyyymmdd')) as months from dual;
  months  
------------------
  2.03225806451613
(1 row)
    
postgres=# select months_between(to_date('20200301', 'yyyymmdd'), to_date('20200130', 'yyyymmdd')) as months from dual;   
  months  
------------------
  1.06451612903226
(1 row)
```
   
### EXTRACT
Oracle 中 `EXTRACT()` 函数是从 Oracle 9i 引入的，主要作用于一个 `date` 或者 `interval` 类型中截取特定的部分。

TDSQL PostgreSQL版（Oracle 兼容）兼容 `EXTRACT` 函数用法。

#### 语法
```
EXTRACT ({ YEAR | MONTH | DAY | HOUR | MINUTE | SECOND | TIMEZONE_HOUR | TIMEZONE_MINUTE |  }
FROM { date_value_expession | interval_value_expression } )
```
    
#### 使用限制
- 暂不支持 Oracle 用法中的参数 timezone_region、timezone_abbr。
- 暂不支持 Oracle 用法中的 日期计算，如：
```
select extract(day from dt2-dt1) day
,extract(hour from dt2-dt1) hour
,extract(minute from dt2-dt1) minute
,extract(second from dt2-dt1) second
from (
select to_timestamp('2011-02-04 15:07:00','yyyy-mm-dd hh24:mi:ss') dt1
,to_timestamp('2011-05-17 19:08:46','yyyy-mm-dd hh24:mi:ss') dt2
from dual);
```

#### 示例
```
1）从一个 date 类型中截取年月日
postgres=# select extract(year from sysdate) year,extract(month from sysdate) month,extract(day from sysdate) day from dual;
  year | month | day 
------+-------+-----
  2021 | 3 |  24
(1 row)
postgres=# select extract(month from date '2021-03-24') month from dual;
  month 
-------
  3
(1 row)
    
2）获取 interval 类型特定部分
postgres=# select  extract(year from interval '21' year) year from dual;
  year 
------
  21
(1 row)
    
3）获取 timezone 类型中特定部分
postgres=# select SYSTIMESTAMP,EXTRACT(TIMEZONE_HOUR FROM SYSTIMESTAMP) hour,EXTRACT(TIMEZONE_MINUTE FROM SYSTIMESTAMP) minu from dual;
  orcl_systimestamp   | hour | minu 
-------------------------------+------+------
  2021-03-24 18:29:52.199622+08 |8 |0
(1 row)
```

## 字符串
### NCHR
#### 语法
```
NCHR(number)
```
`NCHR` 返回具有与国家字符集中的数字等效的二进制字符。返回的值始终为 `NVARCHAR2`。此函数等效于将 `CHR` 函数与 `USING NCHAR_CS` 子句一起使用。

#### 示例
```
postgres=# select NCHR(116) from dual;
  nchr 
------
  t
(1 row)
postgres=# select NCHR(84);
  nchr 
------
  T
(1 row)
```
    
### NLS_UPPER
`NLS_UPPER` 将字符串转换成大写，并可指定排序方式为拼音、部首或笔画。

#### 语法
```
NLS_UPPER( x [, y ] )
```
其中：
`x`：字符型表达式。
`y`：可选，指定排序的方式（`nls_sort=`）。
`SCHINESE_RADICAL_M`（部首、笔画）
`SCHINESE_STROKE_M`（笔画、部首)
`SCHINESE_PINYIN_M`（拼音））
    
#### 示例
```
postgres=# with tmp as
(
    select 1 id,'abc' info 
    union all
    select 2 id,'Acd' info
    union all
    select 3 id,'BDe' info
)
select id,NLS_UPPER(info,'nls_sort= SCHINESE_STROKE_M') 
from tmp 
order by NLS_UPPER(info,'nls_sort= SCHINESE_STROKE_M');
  id | nls_upper 
----+-----------
  1 | ABC
  2 | ACD
  3 | BDE
(3 rows)
```
    
### NLSSORT
#### 语法
```
NLSSORT(char [, 'nlsparam' ])
```
用于对中文按拼音、笔画、部首进行排序。
通过设置 `NSL_SORT` 值来实现：
`SCHINESE_RADICAL_M` 按照部首（第一顺序）、笔划（第二顺序）排序。
`SCHINESE_STROKE_M` 按照笔划（第一顺序）、部首（第二顺序）排序。
`SCHINESE_PINYIN_M` 按照拼音排序。

#### 示例
```
CREATE TABLE test (name VARCHAR2(15));
insert into test values('中');
insert into test values('国');
insert into test values('你');
insert into test values('好');
select * from test order by nlssort(name,'NLS_SORT=SCHINESE_PINYIN_M');
select * from test order by nlssort(name,'NLS_SORT=SCHINESE_STROKE_M');
select * from test order by nlssort(name,'NLS_SORT=SCHINESE_RADICAL_M');
```
    
### REGEXP_REPLACE
#### 语法
```
 REGEXP_REPLACE(source_char, pattern
       [, replace_string
      [, position
     [, occurrence
    [, match_parameter ]
     ]
      ]
       ]
      )
```
REGEXP_REPLACE（源字符串，正则表达式，替换的字符，从第几个字符开始匹配（默认为1），第几个匹配组（默认为全部），取值范围）。 

#### 示例
```
select regexp_replace('0123045','0','A') from dual;
select regexp_replace('0123045','0','A',2) from dual;
```


### REGEXP_SUBSTR
#### 语法
```
REGEXP_SUBSTR(source_string, pattern
   [, position
  [, occurrence
 [, match_parameter ]
  ]
   ]
  )
```
`srcstr`：需要进行正则处理的字符串。
`pattern`：进行匹配的正则表达式。
`position`：起始位置，从第几个字符开始正则表达式匹配（默认为 1）。
`occurrence` ：标识第几个匹配组，默认为 1。
`match_parameter`：模式（`i` 不区分大小写进行检索；`c` 区分大小写进行检索。默认为 `c`）。

#### 示例
```
select   REGEXP_SUBSTR('as12b','b',1) from dual;
```
    
### INSTR 
#### 语法
```
INSTR (string , substring [, position [, occurrence ] ]) 
```
`string`：源字符串
`substring`：目标字符串
`position`：起始位置
`occurrence`：匹配序号
在 `string` 中搜索 `substring` 出现的位置。

#### 示例
```
SELECT INSTR('CORPORATE FLOOR','OR', 3, 2) FROM DUAL;
```
    
### LENGTH、LENGTHB
#### 语法
```
{ LENGTH| LENGTHB}(char)
```
`LENGTH` 函数返回 `char` 的长度。`LENGTH` 使用输入字符集定义的字符来计算长度。`LENGTHB` 使用字节而不是字符。

#### 示例
```
select length('CAND IDE') from dual;
```
    
## NULL 相关
`NVL` 函数的功能是实现空值的转换，根据第一个表达式的值是否为空值来返回响应的列名或表达式，主要用于对数据列上的空值进行处理。
如果第一个参数的值为空值，则返回第二个参数的值，否则返回第一个参数的值。如果两个参数的值都为空值，则返回空值。第一个参数和第二个参数可以是任何类型的数据，但两个参数的数据类型必须相同（或能够由隐式转换为相同的类型）。

#### 语法
```
NVL( string1, replace_with)
```

### NVL(character varying, integer)
支持 `NVL(character varying, integer)` 函数。

#### 示例
```
postgres=# select nvl('abc'::varchar, 1);
  nvl 
-----
  abc
(1 row)
postgres=# select nvl('abc'::varchar2, 1);
  nvl 
-----
  abc
(1 row)
postgres=# select nvl('abc'::text, 1);
  nvl 
-----
  abc
(1 row)
postgres=# select nvl(null::text, 1);
  nvl 
-----
  1
(1 row)
```
   

### NVL(numeric, integer)
支持 `NVL(numeric, integer)` 函数。

#### 示例
```
postgres=# select nvl(12::numeric,''::integer);  
  nvl 
-----
  12
(1 row)
postgres=# select nvl(12::numeric,'123'::integer);
  nvl 
-----
  12
(1 row)
postgres=# select nvl(null::numeric,''::integer);
  nvl 
-----   

(1 row)
postgres=# select nvl(null::numeric,'123'::integer);
  nvl 
-----
  123
(1 row)
```
    
### NVL(bigint, int)
支持 `NVL(bigint, int)` 函数。

#### 示例
```
postgres=# select nvl(123::bigint,12::int); 
  nvl 
-----
  123
(1 row)
postgres=# select nvl(''::bigint,12::int); 
  nvl 
-----
  12
(1 row)
postgres=# select nvl(null::bigint,12::int); 
  nvl 
-----
  12
(1 row)
```
    
### NVL(numeric,'')  
支持 `NVL (numeric,'')` 函数。

#### 示例
```
postgres=# select nvl(123.45, '') from dual;
  nvl   
--------
  123.45
(1 row)
postgres=# select nvl(12::numeric,'');  
  nvl 
-----
  12
(1 row)
postgres=# select nvl(12::numeric,'123');
  nvl 
-----
  12
(1 row)
postgres=# select nvl(null::numeric,'');   
  nvl 
-----
    
(1 row)
postgres=# select nvl(null::numeric,'123');
  nvl 
-----
  123
(1 row)
```
   
### LNNVL 
`LNNVL` 用于某个语句的 `where` 子句中的条件，如果条件为 `true` 则返回 `false`；如果条件为 `UNKNOWN` 或者 `false` 则返回 `true`。该函数不能用于复合条件如 `AND`、` OR` 或者 `BETWEEN` 中。    

#### 语法
```
LNNVL( expression )
```
    
#### 示例
```
postgres=# create table t_lnnvl(f1 integer, f2 integer);
CREATE TABLE
postgres=# insert into t_lnnvl values(1,1),(1,2),(1,3),(1,4);
COPY 4
postgres=# insert into t_lnnvl values(1,null);
INSERT 0 1
postgres=# select * from t_lnnvl where lnnvl(f2>2);
  f1 | f2 
----+----
  1 |  1
  1 |  2
  1 |   
(3 rows)
```
    
## 编码与解码
`DECODE` 函数是 Oracle PL/SQL 的功能强大的函数之一，用于实现 `if–then–else` 逻辑判断。

#### 语法
```
DECODE(value, if1, then1, if2,then2, if3,then3, . . . else )
```
`value` 代表某个表的任何类型的任意列或一个通过计算所得的任何结果。当每个 `value` 值被测试，如果 `value` 的值为 `if1`，`DECODE` 函数的结果是 `then1`；如果 `value` 等于 `if2`，`DECODE` 函数结果是 `then2` 等等。事实上，可以给出多个 `if/then` 配对。如果 `value` 结果不等于给出的任何配对时，`DECODE` 结果就返回 `else`。
这里的 `if`、`then` 及 `else` 都可以是函数或计算表达式。

在此基础上，补充和完善了以下 `DECODE` 函数用法。

### DECODE(numeric, integer, text, numeric) 
支持参数为 `numeric`、`integer`、`text`、`numeric` 的 `DECODE` 函数调用。

#### 示例
```
postgres=# select decode(1::numeric,2::integer,3::text,10::numeric) from dual;
  decode 
--------
  10
(1 row)
```
    
### DECODE(bigint, integer, integer, integer)
支持参数为 `bigint`、`integer`、`integer`、`integer` 的 `DECODE` 函数调用。

#### 示例
```
postgres=# select decode(1::bigint,2::integer,3::integer,10::integer) from dual;
  decode 
--------
  10
(1 row)
```
   
### DECODE(bigint, integer, integer, integer, integer)
支持参数为 `bigint`、`integer`、`integer`、`integer`、`integer` 的 `DECODE` 函数调用。

#### 示例
```
postgres=# select decode(1::bigint,2::integer,3::integer,4::integer, 10::integer) from dual;
  decode 
--------
     
(1 row)
postgres=# select decode(1::bigint,2::integer,3::integer,1::integer, 10::integer) from dual;
  decode 
--------
  10
(1 row)
```
    
### DECODE(bigint, bigint, bigint, double precision)
支持参数为 `bigint`、`bigint`、`bigint`、`double precision` 的 `DECODE` 函数调用。

#### 示例
```
postgres=# select decode(1::bigint,2::bigint,3::bigint,10::double precision) from dual;
  decode 
--------
  10
(1 row)
```
    
### DECODE(bigint, integer, integer, double precision) 
支持参数为 `bigint`、 `integer`、 `integer`、 `double precision` 的 `DECODE` 函数调用。
    
#### 示例
```
postgres=# select decode(1::bigint,2::integer,3::integer,10::double precision) from dual;
  decode 
--------
  10
(1 row)
```
      
### DECODE(numeric, bigint, text, bigint, text)
支持参数为 `numeric`、`bigint`、`text`、`bigint`、`text` 的 `DECODE` 函数调用。
    
#### 示例
```
postgres=# select decode(1::numeric,2::bigint,3::text,4::bigint,10::text) from dual;
  decode 
--------
     
(1 row)
postgres=# select decode(1::numeric,2::bigint,3::text,1::bigint,10::text) from dual;
  decode 
--------
  10
(1 row)
```
   
### DECODE(0,0,0,0/0)
支持传入参数为 `0,0,0,0/0` 的用法。

#### 示例
```
postgres=# select decode(0,0,0,0/0) from dual;
  decode 
--------
  0
(1 row)
```
    
### DUMP
`DUMP()` 函数可以返回一个 `varchar` 值，该值包含了数据类型代码、字节长度和表达式的内部表示形式。

#### 语法
```
DUMP(expr[,return_fmt[,start_position][,length]])
```
其中：
- expr：这个参数是要进行分析的表达式（数字或字符串等，可以是各个类型的值）。
- return_fmt：指返回参数的格式，有5种用法：
   - 8：以8进制返回结果的值。
   - 10：以10进制返回结果的值（默认）。
   - 16：以16进制返回结果的值。
   - 17：以单字符的形式返回结果的值。
   - 1000：以上4种加上1000，表示在返回值中加上当前字符集：
    - 1008：带字符集名称的八进制符号。
    - 1010：带字符集名称的十进制符号。
    - 1016：带字符集名称的十六进制符号。
    - 1017：带字符集名称的单个字符。
- start_position：开始进行返回的字符位置。
- length：需要返回的字符长度。

返回结果格式如：
```
Typ=96 Len=3 [CharacterSet=ZHS16GBK]: 61,62,63
```
1. `Typ` 表示当前的 `expr` 值的类型，类型查询 SQL：`select typname from pg_type where oid=?；`。

   Oracle 与 TDSQL PostgreSQL 版（Oracle 兼容）中类型对比如下：

| CODE TYP | Oracle Type                   | CODE TYP | TDSQL Type  |
| -------- | ----------------------------- | -------- | ----------- |
| 1        | VARCHAR2                      | 781      | varchar2    |
| 2        | NUMBER                        | 1700     | number      |
| 8        | LONG                          | -        | 不支持      |
| 12       | DATE                          | 1082     | date        |
| 23       | RAW                           | -        | 不支持      |
| 24       | LONG RAW                      | -        | 不支持      |
| 69       | ROWID                         | 4657     | rowid       |
| 96       | CHAR                          | 1042     | bpchar      |
| 112      | CLOB                          | 11905    | clob        |
| 113      | BLOB                          | 11904    | blob        |
| 114      | BFILE                         | -        | 不支持      |
| 180      | TIMESTAMP                     | 1114     | timestamp   |
| 181      | TIMESTAMP WITH TIMEZONE       | 1184     | timestamptz |
| 182      | INTERVAL YEAR TO MONTH        | 1186     | interval    |
| 183      | INTERVAL DAY TO SECOND        | 1186     | interval    |
| 208      | UROWID                        | -        | 不支持      |
| 231      | TIMESTAMP WITH LOCAL TIMEZONE | -        | 不支持      |


2. `Len` 表示占用的字节数，此处的字节数和 Oracle 可能会有差异。

3. 具体的存储值。返回的数值就是 TDSQL PostgreSQL版（Oracle 兼容）在数据库内部的存储形式。对于非汉字的普通字符串，可以理解为就是它的 ASCII 码。


#### 示例
```
postgres=# select dump('abc') from dual;
  dump   
---------------------------------
  Typ=25 Len=7: 28,0,0,0,97,98,99
(1 row)
postgres=# select dump('abc',16) from dual;
  dump   
---------------------------------
  Typ=25 Len=7: 1c,0,0,0,61,62,63
(1 row)
postgres=# select dump('abc',1016) from dual;
  dump
---------------------------------------------------
  Typ=25 Len=7 CharacterSet=UTF8: 1c,0,0,0,61,62,63
(1 row)
postgres=# select dump('abc',17,2,2) from dual;
  dump
-------------------
  Typ=25 Len=7: ?,?
(1 row)
postgres=# select dump('a=?5') from dual;
  dump
------------------------------------
  Typ=25 Len=8: 32,0,0,0,97,61,63,53
(1 row)
postgres=# select chr(97),chr(61),chr(63),chr(53) from dual;
  chr | chr | chr | chr 
-----+-----+-----+-----
  a   | =   | ?   | 5
(1 row)
postgres=# select ascii('a'),ascii('='),ascii('?'),ascii('5') from dual;
  ascii | ascii | ascii | ascii 
-------+-------+-------+-------
  97 |61 |63 |53
(1 row)
```

## XML
### EXTRACTVALUE
`EXTRACTVALUE` 函数将 XMLType 实例和 XPath 表达式作为参数，并返回结果节点的标量值。

#### 语法
```
EXTRACTVALUE
    (XMLType_instance, XPath_string
  [, namespace_string ]
    )
```
    
#### 示例
```
create table temp (
   name varchar2(200),
   age number,
   temp_clob CLOB
   );
   insert into temp values('aaa',32,'<AAA>
   <BBB id = "b1"/>
   <BBB id = "b2">
   hello
</BBB>
   <BBB name = "bbb"/>
   <BBB/>
</AAA>');
    
select extractvalue(xmltype(a.temp_clob),'/AAA/BBB[@id="b2"]') from temp a;
```

## 转换
### TO_CLOB
TDSQL PostgreSQL版（Oracle 兼容）兼容 Oracle 的 `TO_CLOB` 函数，将字符串、数字转换为 `clob` 类型。

#### 语法
```
TO_CLOB( { string | numeric | clob })
```
    
#### 示例
```
postgres=#  select to_clob('tbase'),dump(to_clob('tbase')) from dual;
  to_clob |dump 
---------+---------------------------------------------
  tbase   | Typ=11899 Len=9: 36,0,0,0,116,98,97,115,101
(1 row)
postgres=#  select to_clob(112233),dump(to_clob(112233)) from dual;
  to_clob | dump 
---------+----------------------------------------------
  112233  | Typ=11899 Len=10: 40,0,0,0,49,49,50,50,51,51
(1 row)
postgres=# select typname from pg_type where oid=11899;
  typname 
---------
  clob
(1 row)
```
确认函数输出类型11899对应 clob。

### ROWIDTOCHAR
Oracle 中 `ROWIDTOCHAR` 函数转换 `rowid` 为 `varchar2` 类型。TDSQL PostgreSQL版（Oracle 兼容）兼容该函数，返回类型为 `text`。
使用限制：参数必须为 `rowid` 类型，或符合 `rowid` 要求的 `varchar`、`varchar2`、`text` 类型。

#### 使用限制
参数必须为 rowid 类型，或符合 rowid 要求的 varchar、varchar2、text 类型。

#### 语法
```
ROWIDTOCHAR(rowid)
```
   
#### 示例
```
postgres=# select rowid,ROWIDTOCHAR(rowid),dump(ROWIDTOCHAR(rowid)) from t_rowid;
  rowid | rowidtochar  |  dump  
----------------------+----------------------+-----------------------------------
  XPK3fw==AQAAAAAAAAA= | XPK3fw==AQAAAAAAAAA= | Typ=25 Len=24: 96,0,0,0,88,80,75,51,102,119,61,61,65,81,65,65,65,65,65,65,65,65,65,61
  XPK3fw==AgAAAAAAAAA= | XPK3fw==AgAAAAAAAAA= | Typ=25 Len=24: 96,0,0,0,88,80,75,51,102,119,61,61,65,103,65,65,65,65,65,65,65,65,65,61
(2 rows)
postgres=# select typname from pg_type where oid=25;
  typname 
---------
  text
(1 row)
确认函数输出类型25对应 text
    
入参为字符串也可以
postgres=# select ROWIDTOCHAR('XPK3fw==AQAAAAAAAAA=');
  rowidtochar  
----------------------
  XPK3fw==AQAAAAAAAAA=
(1 row)
```
    
### CHARTOROWID
Oracle 中的 `CHARTOROWID` 函数转换  `CHAR`、 `VARCHAR2`、 `NCHAR` 或 `NVARCHAR2` 类型为 `rowid` 值。

TDSQL PostgreSQL版（Oracle 兼容）中 `rowid` 长度为20位。

#### 语法
```
CHARTOROWID( { varchar | text })
```
    
#### 示例
```
测试表 t_rowid 中查看已有 rowid
postgres=# select rowid,* from t_rowid;
  rowid | f1 |  f2  
----------------------+----+------
  XPK3fw==AQAAAAAAAAA= |  1 | ONE
  XPK3fw==AgAAAAAAAAA= |  2 | TWO1
(2 rows)
    
确认 CHARTOROWID 函数调用，及函数输出类型
postgres=# select CHARTOROWID('XPK3fw==AQAAAAAAAAA='),
dump(CHARTOROWID('XPK3fw==AQAAAAAAAAA=')) from dual;;
  chartorowid  |  dump   
----------------------+-------------------------------------------------
  XPK3fw==AQAAAAAAAAA= | Typ=4657 Len=12: 1,0,0,0,0,0,0,0,92,242,183,127
(1 row)
    
postgres=# select typname from pg_type where oid=4657;
  typname 
---------
  rowid
(1 row)
postgres=# 
类型4657对应 rowid
```
    
### TO_CHAR(十进制，'xxx') 转换为16进制
`TO_CHAR` 通常用于将日期、数字转换为字符串，但 Oracle 中还有一种用途，可以用于将十进制转换为十六进制。

使用限制：需要开启 Oracle 兼容性，即 `enable_oracle_compatible` 为 `on`。

#### 语法
```
TO_CHAR( {numeric | string } , 'xxx' )
```
    
#### 示例
```
postgres=# select to_char('255','xxx') from dual;  
  to_char 
---------
  ff
(1 row)
    
postgres=# select to_char(255,'xxx') from dual;  
  to_char 
---------
  ff
(1 row)
postgres=# select ltrim(to_char(to_char(sysdate,'yyyy'),'xxxx')) FROM dual;
  ltrim 
-------
  7e5
(1 row)
    
包含字符不符合报错：
postgres=# select CHARTOROWID('XPK3fw==AQAAAAAAAA-=') from dual;;
ERROR:  invalid symbol "-" while decoding base64 sequence
    
长度不符合报错：
postgres=# select CHARTOROWID('XPK3fw==AQAAAAAAAAa==') from dual;;
ERROR:  invalid argument string length
```
   
## 大对象
### EMPTY_BLOB
TDSQL PostgreSQL版（Oracle 兼容）兼容 Oracle 的 EMPTY_BLOB 函数，用于初始化 BLOB 字段，然后再使用输出流向字段中写数据。

#### 语法
```
EMPTY_BLOB()
```

#### 示例
```
postgres=# create table t_empty_blob (f1 int,f2 blob);
CREATE TABLE
postgres=# insert into t_empty_blob values (1,empty_blob());
INSERT 0 1
postgres=# update t_empty_blob set f2='TBase V5' where f1=1;
UPDATE 1
postgres=# select * from t_empty_blob ;
  f1 |f2
----+----------
  1 | \x5442617365205635
(1 row)
```
   
### EMPTY_CLOB
TDSQL PostgreSQL版（Oracle 兼容）兼容 Oracle 的 EMPTY_CLOB 函数，用于初始化 CLOB 字段，然后再使用输出流向字段中写数据。

#### 语法
```
EMPTY_CLOB()
```

#### 示例
```
postgres=# create table t_empty_clob (f1 int,f2 clob);
CREATE TABLE
postgres=# insert into t_empty_clob values (1,empty_clob());
INSERT 0 1
postgres=# update t_empty_clob set f2='TBase V5' where f1=1;
UPDATE 1
postgres=# select * from t_empty_clob ;
  f1 |f2
----+----------
  1 | TBase V5
(1 row)
```
    
