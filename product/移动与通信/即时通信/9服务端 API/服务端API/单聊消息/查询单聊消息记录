## 功能说明
- 管理员按照时间范围查询某单聊会话的消息记录。
- 查询的单聊会话由请求中的 From_Account 和 to_Account 指定。查询结果包含会话双方互相发送的消息，具体每条消息的发送方和接收方由每条消息里的 From_Account 和 to_Account 指定。
- 请求中的 From_Account 和 to_Account 字段值互换，查询结果不变。
- 查询结果包含被撤回的消息，由消息里的 MsgFlagBits 字段标识。
- 若想通过 [REST API 撤回单聊消息](https://cloud.tencent.com/document/product/269/38980)接口撤回某条消息，可先用本接口查询出该消息的 MsgKey, 然后再调用撤回接口进行撤回。

## 接口调用说明
### 请求 URL 示例
```
https://console.tim.qq.com/v4/openim/admin_getroammsg?sdkappid=88888888&identifier=admin&usersig=xxx&random=99999999&contenttype=json
```
### 请求参数说明

下表仅列出调用本接口时涉及修改的参数及其说明，更多参数详情请参考 [REST API 简介](https://cloud.tencent.com/document/product/269/1519)。

| 参数               | 说明                                 |
| ------------------ | ------------------------------------ |
| v4/openim/admin_getroammsg  | 请求接口                             |
| sdkappid           | 创建应用时即时通信 IM 控制台分配的 SDKAppID |
| identifier         | 必须为 App 管理员帐号，更多详情请参见 [App 管理员](https://cloud.tencent.com/document/product/269/31999#app-.E7.AE.A1.E7.90.86.E5.91.98)                |
| usersig            | App 管理员帐号生成的签名，具体操作请参见 [生成 UserSig](https://cloud.tencent.com/document/product/269/32688)    |
| random             | 请输入随机的32位无符号整数，取值范围0 - 4294967295                 |

### 最高调用频率

200次/秒。

### 请求及应答示例

#### 一次请求即返回全部数据。（不需要续拉）

假设用户 dramon1 和 dramon2 聊天，在2020-03-20 10:00:00 ~ 2020-03-20 11:00:00这1个小时内有2条消息。现在需要查询该会话在这1个小时内的聊天记录。

##### 请求示例
```
{
    "From_Account":"dramon2",
    "To_Account":"dramon1",
    "MaxCnt":2,
    "MinTime":1584669600,
    "MaxTime":1584673200
}
```
##### 应答示例
```
{
    "ActionStatus": "OK",
    "ErrorInfo": "",
    "ErrorCode": 0,
    "Complete": 1,
    "MsgCnt": 2,
    "LastMsgTime": 1584669680,
    "LastMsgKey": "549396494_2578554_1584669680",
    "MsgList": [
        {
            "From_Account": "dramon1",
            "To_Account": "dramon2",
            "MsgSeq": 549396494,
            "MsgRandom": 2578554,
            "MsgTimeStamp": 1584669680,
            "MsgFlagBits": 0,
            "MsgKey": "549396494_2578554_1584669680",
            "MsgBody": [
                {
                    "MsgType": "TIMTextElem",
                    "MsgContent": {
                        "Text": "1"
                    }
                }
            ]
        },
        {
            "From_Account": "dramon2",
            "To_Account": "dramon1",
            "MsgSeq": 1054803289,
            "MsgRandom": 7201,
            "MsgTimeStamp": 1584669689,
            "MsgFlagBits": 0,
            "MsgKey": "1054803289_7201_1584669689",
            "MsgBody": [
                {
                    "MsgType": "TIMTextElem",
                    "MsgContent": {
                        "Text": "2"
                    }
                }
            ]
        }
    ]
}
```

#### 多次请求才能返回全部数据。（需要续拉）
假设用户 dramon1 和 dramon2 聊天，在2020-03-20 10:00:00 ~ 2020-03-20 11:00:00这1个小时内有100条消息。现在需要查询该会话在这1个小时内的聊天记录。
##### 首次请求示例
```
{
    "From_Account":"dramon2",
    "To_Account":"dramon1",
    "MaxCnt":100,
    "MinTime":1584669600,
    "MaxTime":1584673200
}
```

##### 应答示例（这里为了说明问题，MsgList 字段未列出）
{
    "ActionStatus": "OK",
    "ErrorInfo": "",
    "ErrorCode": 0,
    "Complete": 0,
    "MsgCnt": 17,
    "LastMsgTime": 1584672269,
    "LastMsgKey": "1259_93754093_1584672269",
    "MsgList": [ ... ] //这里MsgList结果未列出
}

应答中的 "Complete": 0 表示该时间范围的消息未拉完，需要续拉。
续拉请求中的 MaxTime 应改成应答的 LastMsgTime 字段值，同时填上应答的 LastMsgKey 字段，如下所示：

##### 续拉请求
```
{
    "From_Account":"dramon2",
    "To_Account":"dramon1",
    "MaxCnt":100,
    "MinTime":1584669600,
    "MaxTime":1584672269,
    "LastMsgKey": "1259_93754093_1584672269"
}
```

#### 请求包字段说明

| 字段 | 类型|属性| 说明 |
|---------|---------|----|---------|
| From_Account | String |必填| 会话其中一方的 Identifier  |
| To_Account | String |必填| 会话其中一方的 Identifier  |
| MaxCnt | Integer |必填| 请求的消息条数。  |
| MinTime | Integer |必填| 请求的消息时间范围的最小值。  |
| MaxTime | Integer |必填| 请求的消息时间范围的最大值。  |
| LastMsgKey | String |选填| 上一次拉到的最后一条消息的MsgKey。（续拉时需要填该字段，填写方法见上面的示例）  |

### 应答包体示例
- 正常应答
```
{
    "ActionStatus": "OK",
    "ErrorInfo": "",
    "ErrorCode": 0,
    "Complete": 1,
    "MsgCnt": 1,
    "LastMsgTime": 1584669680,
    "LastMsgKey": "549396494_2578554_1584669680",
    "MsgList": [
        {
            "From_Account": "dramon1",
            "To_Account": "dramon2",
            "MsgSeq": 549396494,
            "MsgRandom": 2578554,
            "MsgTimeStamp": 1584669680,
            "MsgFlagBits": 0,
            "MsgKey": "549396494_2578554_1584669680",
            "MsgBody": [
                {
                    "MsgType": "TIMTextElem",
                    "MsgContent": {
                        "Text": "1"
                    }
                }
            ]
        }
    ]
}
```

- 异常应答
```
{
    "ActionStatus": "FAIL", 
    "ErrorInfo": "Fail to Parse json data of body, Please check it", 
    "ErrorCode": 90001
}
```

### 应答包字段说明

| 字段|类型 |说明 |
|---------|---------|---------|
| ActionStatus| String | 请求处理的结果，OK 表示处理成功，FAIL 表示失败  |
| ErrorCode| Integer | 错误码，0表示成功，非0表示失败|
| ErrorInfo| String | 错误信息  |
| Complete | Integer | 是否拉完。0表示未拉完，需要续拉。1表示已拉完。  |
| MsgCnt | Integer | 本次拉到的消息条数。  |
| LastMsgTime | Integer | 本次拉到的消息里的最后一条消息的时间。  |
| LastMsgKey | Integer | 本次拉到的消息里的最后一条消息的标识。  |
| MsgList | Array | 返回的消息列表。  |
| MsgFlagBits | Integer | 该条消息的属性。0表示正常消息，8表示被撤回的消息。  |
| MsgBody | Object | 消息内容，具体格式请参考 [消息格式描述](https://cloud.tencent.com/document/product/269/2720)（注意，一条消息可包括多种消息元素，MsgBody 为 Array 类型）  |
| MsgKey | String | 标识该条消息，可用于 [REST API 撤回单聊消息](https://cloud.tencent.com/document/product/269/38980)。  |

## 错误码说明

除非发生网络错误（例如502错误），否则该接口的 HTTP 返回码均为200。真正的错误码，错误信息是通过应答包体中的 ErrorCode、ErrorInfo 来表示的。
公共错误码（60000到79999）参见 [错误码](https://cloud.tencent.com/document/product/269/1671) 文档。
本 API 私有错误码如下：

| 错误码        | 描述                                                         |
| ------------- | ------------------------------------------------------------ |
| 90001         | JSON 格式解析失败，请检查请求包是否符合 JSON 规范            |
| 90003         | JSON 格式请求包体中缺少 To_Account 字段或者 To_Account 字段不是 String 类型|
| 90008         | JSON 格式请求包体中缺少 From_Account 字段或者 From_Account 帐号不存在。|
| 90009         | 请求需要 App 管理员权限                                      |
| 91000         | 服务内部错误，请重试                                         |


## 参考
单发单聊消息（[v4/openim/sendmsg](https://cloud.tencent.com/document/product/269/2282)）
批量发单聊消息（[v4/openim/batchsendmsg](https://cloud.tencent.com/document/product/269/1612)）
撤回单聊消息（[v4/openim/admin_msgwithdraw](https://cloud.tencent.com/document/product/269/38980)）

